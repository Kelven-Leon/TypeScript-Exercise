TypeScript Introduction
Exercise 1
Complete the sentence:


TypeScript allows developers to add types to JavaScript.

Exercise 2

Complete the sentence:


JavaScript is a loosely typed language.

TypeScript Get Started

Exercise 1 

The TypeScript compiler can be configured with which file?

tsconfig.json 

TypeScript Simple Types

Exercise 1
There are two main ways TypeScript assigns a type:

Explicit
Implicit

Exercise 2

Create a "firstName" variable, string type using Implicit type:
let 
firstName = "Dylan";
Exercise 3
Create a "firstName" variable, string type using Explicit type:
let firstName: string = "Dylan";

TypeScript Special Types

Exercise 1
Create an empty "myVar" variable, and disable type checking:
let myVar: any;
Exercise 2
Create an empty "myVar" variable, and specify it should be an unknown type:

let myVar: unknown;

TypeScript Arrays

Exercise 1

Prevent the array from being changed:

const names: readonlystring[] = ["Dylan"];

TypeScript Turples

Exercise 1

The order of value types does not matter for Tuples:

False

Exercise 2

Define ourTuple as string and boolean, in that order:

let ourTuple: [string, boolean];

TypeScript Object Types 

Exercise 1

Add the correct types for the object below:

const car: { type: string, model: string, year: number } = {
  type: "Toyota",
  model: "Corolla",
  year: 2009
};

Exercise 2

Specify that the second property, called model, should be optional:

const car: { type: string, model?: string } = {
  type: "Toyota"
};

TypeScript Enums

Exercise 1

Create an enum called myEnum, with 2 constants (myFirstConst, mySecondConst) with default values:

enum myEnum {
  myFirstConst,
  mySecondConst
};

Exercise 2

Create an enum called myEnum, with 2 constants (myFirstConst, mySecondConst) with the string values "first" and "second":

enum myEnum { 
myFirstConst = "first",
mySecondConst = "second"
};

TypeScript Aliases & Interfaces

Exercise 1

Create a Type Alias for a string, called carType:

type carType = string

Exercise 2

Create an interface called myInterface, with the property myProp as a string:

interface myInterface {
myProp: string
}

Exercise 3

Extend the myInterface interface from last exercise, and add a property myExtProp as a number:

interface myExtInterface extends myInterface {
myExtProp : number
}

TypeScript Union Types 
Exercise 1

Specify that the paramater "myVar" for the function can be either string or number:

function myFunc(myVar: string |number) {
  console.log(myVar)
}

TypeScript Functions

Exercise 1

Create a function that returns the string "Learning is Fun!", with the return type explicitly defined:

function myFunc(): string {
return "Learning is Fun!";
}

Exercise 2

Create a function that specifically does not return a value:

function myFunc():  void {
  console.log("Learning is Fun!");
}

Exercise 3

Create a function with 2 parameters (myVar1 and myVar2), that are both strings:

function myFunc(myVar1 : string, myVar2: string) {
  return(myVar1 + myVar2);
}

Exercise 4

Create a function with 2 parameters (myVar1 and myVar2,in that order), that are both strings.

Specify that myVar2 should be optional:

function myFunc(myVar1: string, myVar2?: string) {
  return(myVar1 + (myVar2 || ""));
}

TypeScript Casting

Exercise 1

Cast the "unknown" variable myVar as a string, using the as keyword:

let myVar: unknown = "Hello world!";
console.log((myVar as string).length);

Exercise 2

Cast the "unknown" variable myVar as a string, using < >:

let myVar: unknown = "Hello world!";
console.log((<string>myVar).length);

TypeScript Classes

Exercise 1

Specify that Person.name can only be accessed within the class, but that the method Person.getName() can be accessed anywhere:

class Person {
private name: string;

 public constructor(name: string) {
  this.name = name;
 }

public getName(): string {
  return this.name;
 }
}

TypeScript Basics Generics

Exercise 1

Complete the Generic:

function createPair<typeX, typeY>(x: typeX, y: typeY): [typeX, typeY] {
 return [x, y];
}
console.log(createPair<string, number>('Meaning', 42));

TypeScript Utility Types

Exercise 1

Declare an object kindPerson from the Person interface, where all the properties are optional:

interface Person {
    age: number;
    firstName: string;
    lastName: string;
}
            
let kindPerson: Partial<Person> = {};

Exercise 2

Declare an object kindPerson from the Person interface, where all the properties are required.

interface Person {
    age: number;
    firstName: string;
    lastName?: string;
}
            
let kindPerson: Required<Person> = {
    age: 1800,
    firstName: "Santa",
    lastName: "Claus"
};

Exercise 3

Complete the sentence:

Record<string, number> is equivalent to { [key: string]: number }
